{"ast":null,"code":"import _classCallCheck from \"/Users/yangsirui/Downloads/2Table-web-master/2Table-web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yangsirui/Downloads/2Table-web-master/2Table-web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yangsirui/Downloads/2Table-web-master/2Table-web/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yangsirui/Downloads/2Table-web-master/2Table-web/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yangsirui/Downloads/2Table-web-master/2Table-web/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/yangsirui/Downloads/2Table-web-master/2Table-web/src/components/Upload.js\";\nexport var Upload =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Upload, _React$Component);\n\n  function Upload(props) {\n    var _this;\n\n    _classCallCheck(this, Upload);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Upload).call(this, props));\n\n    _this.changeFile = function (e) {\n      _this.setState({\n        file: e.target.value\n      });\n    };\n\n    _this.state = {\n      file: null\n    };\n    return _this;\n  }\n\n  _createClass(Upload, [{\n    key: \"render\",\n    value: function render() {\n      /*\n      We need to register the required plugins to do image manipulation and previewing.\n      */\n      FilePond.registerPlugin( // encodes the file as base64 data\n      FilePondPluginFileEncode, // validates files based on input type\n      FilePondPluginFileValidateType, // corrects mobile image orientation\n      FilePondPluginImageExifOrientation, // previews the image\n      FilePondPluginImagePreview, // crops the image to a certain aspect ratio\n      FilePondPluginImageCrop, // resizes the image to fit a certain size\n      FilePondPluginImageResize, // applies crop and resize information on the client\n      FilePondPluginImageTransform); // Select the file input and use create() to turn it into a pond\n      // in this example we pass properties along with the create method\n      // we could have also put these on the file input element itself\n\n      FilePond.create(document.querySelector('input'), {\n        labelIdle: \"Drag & Drop your picture or <span class=\\\"filepond--label-action\\\">Browse</span>\",\n        imagePreviewHeight: 170,\n        imageCropAspectRatio: '1:1',\n        imageResizeTargetWidth: 200,\n        imageResizeTargetHeight: 200,\n        stylePanelLayout: 'compact circle',\n        styleLoadIndicatorPosition: 'center bottom',\n        styleButtonRemoveItemPosition: 'center bottom'\n      });\n      return React.createElement(\"input\", {\n        type: \"file\",\n        class: \"filepond\",\n        name: \"filepond\",\n        accept: \"image/png, image/jpeg, image/gif\",\n        onChange: this.changeFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      });\n      React.createElement(\"button\", {\n        onClick: this.props.importFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Import\");\n    }\n  }]);\n\n  return Upload;\n}(React.Component);","map":{"version":3,"sources":["/Users/yangsirui/Downloads/2Table-web-master/2Table-web/src/components/Upload.js"],"names":["Upload","props","changeFile","e","setState","file","target","value","state","FilePond","registerPlugin","FilePondPluginFileEncode","FilePondPluginFileValidateType","FilePondPluginImageExifOrientation","FilePondPluginImagePreview","FilePondPluginImageCrop","FilePondPluginImageResize","FilePondPluginImageTransform","create","document","querySelector","labelIdle","imagePreviewHeight","imageCropAspectRatio","imageResizeTargetWidth","imageResizeTargetHeight","stylePanelLayout","styleLoadIndicatorPosition","styleButtonRemoveItemPosition","importFile","React","Component"],"mappings":";;;;;;AACA,WAAaA,MAAb;AAAA;AAAA;AAAA;;AACA,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACX,gFAAMA,KAAN;;AADW,UAMbC,UANa,GAMA,UAACC,CAAD,EAAO;AACZ,YAAKC,QAAL,CAAc;AAACC,QAAAA,IAAI,EAAGF,CAAC,CAACG,MAAF,CAASC;AAAjB,OAAd;AACH,KARQ;;AAEX,UAAKC,KAAL,GAAa;AACTH,MAAAA,IAAI,EAAE;AADG,KAAb;AAFW;AAKZ;;AANP;AAAA;AAAA,6BAWQ;AACJ;;;AAGAI,MAAAA,QAAQ,CAACC,cAAT,EACC;AACCC,MAAAA,wBAFF,EAIC;AACCC,MAAAA,8BALF,EAOC;AACCC,MAAAA,kCARF,EAUC;AACCC,MAAAA,0BAXF,EAaC;AACCC,MAAAA,uBAdF,EAgBC;AACCC,MAAAA,yBAjBF,EAmBC;AACCC,MAAAA,4BApBF,EAJI,CA2BJ;AACA;AACA;;AACAR,MAAAA,QAAQ,CAACS,MAAT,CACCC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CADD,EAEC;AACCC,QAAAA,SAAS,oFADV;AAEGC,QAAAA,kBAAkB,EAAE,GAFvB;AAGGC,QAAAA,oBAAoB,EAAE,KAHzB;AAIGC,QAAAA,sBAAsB,EAAE,GAJ3B;AAKGC,QAAAA,uBAAuB,EAAE,GAL5B;AAMGC,QAAAA,gBAAgB,EAAE,gBANrB;AAOGC,QAAAA,0BAA0B,EAAE,eAP/B;AAQGC,QAAAA,6BAA6B,EAAE;AARlC,OAFD;AAaA,aACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AACA,QAAA,KAAK,EAAC,UADN;AAEA,QAAA,IAAI,EAAC,UAFL;AAGA,QAAA,MAAM,EAAC,kCAHP;AAIA,QAAA,QAAQ,EAAI,KAAK1B,UAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAMI;AAAQ,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAW4B,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACP;AA7DD;;AAAA;AAAA,EAA4BC,KAAK,CAACC,SAAlC","sourcesContent":["\nexport class Upload extends React.Component {\nconstructor(props) {\n        super(props)\n        this.state = {\n            file: null,\n        }\n      }\n      changeFile = (e) => {\n              this.setState({file : e.target.value});\n          }\n\nrender(){\n    /*\n    We need to register the required plugins to do image manipulation and previewing.\n    */\n    FilePond.registerPlugin(\n    \t// encodes the file as base64 data\n      FilePondPluginFileEncode,\n\n    \t// validates files based on input type\n      FilePondPluginFileValidateType,\n\n    \t// corrects mobile image orientation\n      FilePondPluginImageExifOrientation,\n\n    \t// previews the image\n      FilePondPluginImagePreview,\n\n    \t// crops the image to a certain aspect ratio\n      FilePondPluginImageCrop,\n\n    \t// resizes the image to fit a certain size\n      FilePondPluginImageResize,\n\n    \t// applies crop and resize information on the client\n      FilePondPluginImageTransform\n    );\n\n    // Select the file input and use create() to turn it into a pond\n    // in this example we pass properties along with the create method\n    // we could have also put these on the file input element itself\n    FilePond.create(\n    \tdocument.querySelector('input'),\n    \t{\n    \t\tlabelIdle: `Drag & Drop your picture or <span class=\"filepond--label-action\">Browse</span>`,\n        imagePreviewHeight: 170,\n        imageCropAspectRatio: '1:1',\n        imageResizeTargetWidth: 200,\n        imageResizeTargetHeight: 200,\n        stylePanelLayout: 'compact circle',\n        styleLoadIndicatorPosition: 'center bottom',\n        styleButtonRemoveItemPosition: 'center bottom'\n    \t}\n    );\n    return(\n        <input type=\"file\"\n        class=\"filepond\"\n        name=\"filepond\"\n        accept=\"image/png, image/jpeg, image/gif\"\n        onChange = {this.changeFile}/>);\n        <button onClick={this.props.importFile}>Import</button>\n};\n}"]},"metadata":{},"sourceType":"module"}